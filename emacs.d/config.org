* Emacs Configuration
** Interface
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(setq inhibit-startup-message t)
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init (load-theme 'spacemacs-dark t))
#+END_SRC

** Buffers
#+BEGIN_SRC emacs-lisp
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(defalias 'list-buffers 'ibuffer)
#+END_SRC

** Packages
*** Try
Use it to test packages without installing them. On a new restart they will not be part of emacs.
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

*** Which-Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

*** Org-Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Ace-Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC

*** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )
#+END_SRC

*** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))
#+END_SRC

*** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

*** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind (("M-s" . avy-goto-char)))
#+END_SRC

*** Auto-Complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC

*** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t ;; install if not already installed

    :init     ;; configuration before loading
    (progn
      (setq evil-search-module 'evil-search)
      (setq evil-ex-complete-emacs-commands nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      )

    :config   ;; configuration after loading
    (progn
      (evil-mode)
      ))
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (progn
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-global-mode +1)
      (setq projectile-completion-syste 'ivy)
      )
    )
#+END_SRC
