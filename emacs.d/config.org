* Emacs Configuration
** Interface
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(setq inhibit-startup-message t)
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init (load-theme 'spacemacs-dark t))
#+END_SRC

** Buffers
#+BEGIN_SRC emacs-lisp
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(defalias 'list-buffers 'ibuffer)
#+END_SRC

** Packages
*** Try
Use it to test packages without installing them. On a new restart they will not be part of emacs.
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

*** Which-Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

*** Org-Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Ace-Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC

*** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )
#+END_SRC

*** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))
#+END_SRC

*** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

*** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind (("M-s" . avy-goto-char)))
#+END_SRC

*** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t ;; install if not already installed

    :init     ;; configuration before loading
    (progn
      (setq evil-search-module 'evil-search)
      (setq evil-ex-complete-emacs-commands nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      )

    :config   ;; configuration after loading
    (progn
      (evil-mode)
      ))
#+END_SRC

*** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :init (global-company-mode)
    :config
    (progn
      (setq company-tooltip-align-annotations t
	    company-show-numbers t)
      (setq company-dabbrev-downcase nil))
    )
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (progn
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-global-mode +1)
      (setq projectile-completion-system 'ivy)
      (setq projectile-git-submodule-command nil)
      )
    )
#+END_SRC

*** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn
      (setq treemacs-show-cursor nil
	    treemacs-indentation 4
	    treemacs-recent-after-file-follow nil
	    treemacs-silent-refresh t
	    )
      (treemacs-resize-icons 16)
      (treemacs-filewatch-mode t)
	    )
    :bind
    (:map global-map
	  ([f8] . treemacs)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t
    :config
    (progn
      (add-hook 'projectile-after-switch-project-hook
		(lambda ()
		  (let ((project-path (projectile-project-root))
			(project-name (file-name-nondirectory
				       (directory-file-name
					(file-name-directory
					 (projectile-project-root)))))
			(active-projects (treemacs-workspace->projects (treemacs-current-workspace))))
		    (dolist (project active-projects)
		      (treemacs-do-remove-project-from-workspace project))
		    (treemacs-do-add-project-to-workspace project-path project-name)
		    )
		  )
		)
      )
    )
#+END_SRC

*** RTags
#+BEGIN_SRC emacs-lisp
  (use-package rtags
    :ensure t
    :config
    (progn
      (setf rtags-path "/home/radu/rtags/bin")
      (setq rtags-use-mark-as-current-symbol t)
      (setq rtags-display-result-backend 'ivy)

      (rtags-enable-standard-keybindings)

      ;; start rdm only in c mode (for now)
      (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
      ))

  (use-package company-rtags
    :ensure t
    :after company rtags
    :config
    (progn
      (setq rtags-autostart-diagnostics t)
      (rtags-diagnostics)
      (setq rtags-completions-enabled t)
      (push 'company-rtags company-backends)
      ))

  (use-package flycheck-rtags
    :ensure t
    :after flycheck rtags
    :config
    (progn
      (defun setup-flycheck-rtags()
	(flycheck-select-checker 'rtags)
	(setq-local flycheck-highlighting-mode nil)
	(setq-local flycheck-check-syntax-automatically nil)
	(rtags-set-periodic-reparse-timeout 2.0)
	)

      (add-hook 'c-mode-hook #'setup-flycheck-rtags)
      (add-hook 'c++-mode-hook #'setup-flycheck-rtags)
      ))

  (use-package ivy-rtags
    :ensure t
    :after rtags ivy
    :config
    (progn
      (setq rtags-display-result-backend 'ivy)
      ))

#+END_SRC

*** RealGUD
#+BEGIN_SRC emacs-lisp
  (use-package realgud
    :ensure t)
#+END_SRC
